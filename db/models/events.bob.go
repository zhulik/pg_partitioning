// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/types"
)

// Event is an object representing the database table.
type Event struct {
	Seq         int32                       `db:"seq" `
	UUID        uuid.UUID                   `db:"uuid" `
	Name        string                      `db:"name" `
	ActorID     uuid.UUID                   `db:"actor_id" `
	AggregateID uuid.UUID                   `db:"aggregate_id" `
	Payload     types.JSON[json.RawMessage] `db:"payload" `
	CreatedAt   time.Time                   `db:"created_at" `
}

// EventSlice is an alias for a slice of pointers to Event.
// This should almost always be used instead of []*Event.
type EventSlice []*Event

// Events contains methods to work with the events view
var Events = psql.NewViewx[*Event, EventSlice]("", "events")

// EventsQuery is a query on the events view
type EventsQuery = *psql.ViewQuery[*Event, EventSlice]

type eventColumnNames struct {
	Seq         string
	UUID        string
	Name        string
	ActorID     string
	AggregateID string
	Payload     string
	CreatedAt   string
}

var EventColumns = buildEventColumns("events")

type eventColumns struct {
	tableAlias  string
	Seq         psql.Expression
	UUID        psql.Expression
	Name        psql.Expression
	ActorID     psql.Expression
	AggregateID psql.Expression
	Payload     psql.Expression
	CreatedAt   psql.Expression
}

func (c eventColumns) Alias() string {
	return c.tableAlias
}

func (eventColumns) AliasedAs(alias string) eventColumns {
	return buildEventColumns(alias)
}

func buildEventColumns(alias string) eventColumns {
	return eventColumns{
		tableAlias:  alias,
		Seq:         psql.Quote(alias, "seq"),
		UUID:        psql.Quote(alias, "uuid"),
		Name:        psql.Quote(alias, "name"),
		ActorID:     psql.Quote(alias, "actor_id"),
		AggregateID: psql.Quote(alias, "aggregate_id"),
		Payload:     psql.Quote(alias, "payload"),
		CreatedAt:   psql.Quote(alias, "created_at"),
	}
}

type eventWhere[Q psql.Filterable] struct {
	Seq         psql.WhereMod[Q, int32]
	UUID        psql.WhereMod[Q, uuid.UUID]
	Name        psql.WhereMod[Q, string]
	ActorID     psql.WhereMod[Q, uuid.UUID]
	AggregateID psql.WhereMod[Q, uuid.UUID]
	Payload     psql.WhereMod[Q, types.JSON[json.RawMessage]]
	CreatedAt   psql.WhereMod[Q, time.Time]
}

func (eventWhere[Q]) AliasedAs(alias string) eventWhere[Q] {
	return buildEventWhere[Q](buildEventColumns(alias))
}

func buildEventWhere[Q psql.Filterable](cols eventColumns) eventWhere[Q] {
	return eventWhere[Q]{
		Seq:         psql.Where[Q, int32](cols.Seq),
		UUID:        psql.Where[Q, uuid.UUID](cols.UUID),
		Name:        psql.Where[Q, string](cols.Name),
		ActorID:     psql.Where[Q, uuid.UUID](cols.ActorID),
		AggregateID: psql.Where[Q, uuid.UUID](cols.AggregateID),
		Payload:     psql.Where[Q, types.JSON[json.RawMessage]](cols.Payload),
		CreatedAt:   psql.Where[Q, time.Time](cols.CreatedAt),
	}
}

// AfterQueryHook is called after Event is retrieved from the database
func (o *Event) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Events.AfterSelectHooks.RunHooks(ctx, exec, EventSlice{o})
	}

	return err
}

// AfterQueryHook is called after EventSlice is retrieved from the database
func (o EventSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Events.AfterSelectHooks.RunHooks(ctx, exec, o)
	}

	return err
}
