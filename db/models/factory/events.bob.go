// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob/types"
	models "pg_partitioning/db/models"
)

type EventMod interface {
	Apply(context.Context, *EventTemplate)
}

type EventModFunc func(context.Context, *EventTemplate)

func (f EventModFunc) Apply(ctx context.Context, n *EventTemplate) {
	f(ctx, n)
}

type EventModSlice []EventMod

func (mods EventModSlice) Apply(ctx context.Context, n *EventTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// EventTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type EventTemplate struct {
	Seq         func() int32
	UUID        func() uuid.UUID
	Name        func() string
	ActorID     func() uuid.UUID
	AggregateID func() uuid.UUID
	Payload     func() types.JSON[json.RawMessage]
	CreatedAt   func() time.Time

	f *Factory
}

// Apply mods to the EventTemplate
func (o *EventTemplate) Apply(ctx context.Context, mods ...EventMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Event
// according to the relationships in the template. Nothing is inserted into the db
func (t EventTemplate) setModelRels(o *models.Event) {}

// Build returns an *models.Event
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use EventTemplate.Create
func (o EventTemplate) Build() *models.Event {
	m := &models.Event{}

	if o.Seq != nil {
		m.Seq = o.Seq()
	}
	if o.UUID != nil {
		m.UUID = o.UUID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.ActorID != nil {
		m.ActorID = o.ActorID()
	}
	if o.AggregateID != nil {
		m.AggregateID = o.AggregateID()
	}
	if o.Payload != nil {
		m.Payload = o.Payload()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.EventSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use EventTemplate.CreateMany
func (o EventTemplate) BuildMany(number int) models.EventSlice {
	m := make(models.EventSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// Event has methods that act as mods for the EventTemplate
var EventMods eventMods

type eventMods struct{}

func (m eventMods) RandomizeAllColumns(f *faker.Faker) EventMod {
	return EventModSlice{
		EventMods.RandomSeq(f),
		EventMods.RandomUUID(f),
		EventMods.RandomName(f),
		EventMods.RandomActorID(f),
		EventMods.RandomAggregateID(f),
		EventMods.RandomPayload(f),
		EventMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m eventMods) Seq(val int32) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Seq = func() int32 { return val }
	})
}

// Set the Column from the function
func (m eventMods) SeqFunc(f func() int32) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Seq = f
	})
}

// Clear any values for the column
func (m eventMods) UnsetSeq() EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Seq = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m eventMods) RandomSeq(f *faker.Faker) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Seq = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m eventMods) UUID(val uuid.UUID) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.UUID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m eventMods) UUIDFunc(f func() uuid.UUID) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.UUID = f
	})
}

// Clear any values for the column
func (m eventMods) UnsetUUID() EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.UUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m eventMods) RandomUUID(f *faker.Faker) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.UUID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m eventMods) Name(val string) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m eventMods) NameFunc(f func() string) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m eventMods) UnsetName() EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m eventMods) RandomName(f *faker.Faker) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m eventMods) ActorID(val uuid.UUID) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.ActorID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m eventMods) ActorIDFunc(f func() uuid.UUID) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.ActorID = f
	})
}

// Clear any values for the column
func (m eventMods) UnsetActorID() EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.ActorID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m eventMods) RandomActorID(f *faker.Faker) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.ActorID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m eventMods) AggregateID(val uuid.UUID) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.AggregateID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m eventMods) AggregateIDFunc(f func() uuid.UUID) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.AggregateID = f
	})
}

// Clear any values for the column
func (m eventMods) UnsetAggregateID() EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.AggregateID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m eventMods) RandomAggregateID(f *faker.Faker) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.AggregateID = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m eventMods) Payload(val types.JSON[json.RawMessage]) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Payload = func() types.JSON[json.RawMessage] { return val }
	})
}

// Set the Column from the function
func (m eventMods) PayloadFunc(f func() types.JSON[json.RawMessage]) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Payload = f
	})
}

// Clear any values for the column
func (m eventMods) UnsetPayload() EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Payload = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m eventMods) RandomPayload(f *faker.Faker) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.Payload = func() types.JSON[json.RawMessage] {
			return random_types_JSON_json_RawMessage_(f)
		}
	})
}

// Set the model columns to this value
func (m eventMods) CreatedAt(val time.Time) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m eventMods) CreatedAtFunc(f func() time.Time) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m eventMods) UnsetCreatedAt() EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m eventMods) RandomCreatedAt(f *faker.Faker) EventMod {
	return EventModFunc(func(_ context.Context, o *EventTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m eventMods) WithParentsCascading() EventMod {
	return EventModFunc(func(ctx context.Context, o *EventTemplate) {
		if isDone, _ := eventWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = eventWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
